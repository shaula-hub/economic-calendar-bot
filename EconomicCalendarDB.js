const Database = require("./database");
const EconomicEventsModel = require("./economicEventsModel");
const TelegramUsersModel = require("./telegramUsersModel");
const { scrapeEconomicCalendar } = require("./CalendarScrapper"); // Your scraper

class EconomicCalendarDB {
  constructor() {
    this.db = new Database();
    this.eventsModel = new EconomicEventsModel(this.db);
    this.usersModel = new TelegramUsersModel(this.db);
  }

  async init() {
    try {
      await this.db.createTables();
      console.log("‚úÖ Database initialized");
    } catch (error) {
      console.error("‚ùå Database initialization failed:", error);
      throw error;
    }
  }

  async updateEconomicData() {
    try {
      console.log("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...");

      // Scrape fresh data
      const scrapedData = await scrapeEconomicCalendar();

      if (!scrapedData || scrapedData.length === 0) {
        console.log("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–±—Ä–∞–Ω—ã, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
        return { success: false, message: "–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–±—Ä–∞–Ω—ã" };
      }

      // Use date-specific overwrite
      await this.eventsModel.overwriteEventsForDate(scrapedData);

      console.log("‚úÖ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
      return {
        success: true,
        message: `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${scrapedData.length} —Å–æ–±—ã—Ç–∏–π`,
        data: scrapedData,
      };
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:", error);
      return {
        success: false,
        message: error.message,
        error: error,
      };
    }
  }

  async getDataForBroadcast() {
    try {
      const events = await this.eventsModel.getAllEvents();
      const activeUsers = await this.usersModel.getActiveUsers();

      return {
        events,
        users: activeUsers,
        userCount: activeUsers.length,
        eventCount: events.length,
      };
    } catch (error) {
      console.error("‚ùå Error getting broadcast data:", error);
      throw error;
    }
  }

  async close() {
    await this.db.close();
  }
}

module.exports = EconomicCalendarDB;
